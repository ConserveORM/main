Design document for Conserve:
This is a framework designed to bridge the object-relational gap and provide full object-oriented ACID compliance
without requiring SQL programming, XML mapping files or special annotation, while taking advantage of the speed and
flexibility of available database engines.

Primitives, primitive object representations, Enums and Strings are called "primary objects".
Only primary objects are stored in a table - all other Objects are referenced by keys.
Note that these keys are not foreig keys.

Each persistence manager maintains a cache of objects it has loaded from the db.
This cache maps between the result of System.identityHash(...) and the database identifier.
The cache uses WeakReferences, thus avoiding memory leaks.

Identity is only maintained  across executions of a single persistence manager,
having multiple instances allows one to have multiple copies of the same ojbect.
Successive loads of the same object will just return a reference to the first loaded object.

getObjects(Object a) returns all objects that match the non-null fields of a as a List of objects of the same class as a.
getObjects(Class c, Object a) returns all objects that match the non-null fields of a as a list of objects of class c.
getObjects(Class c, Where w) returns all objects that satisfy the Where clause w as a list of objects of class c. 

The deleteObject(...) methods are analogous to this.
Deletion will delete the object and all child objects that are not referenced by other objects. 

saveObject(Object a) adds a to the database. If no table for objects of a's type exist, one will be created. If a already exists in the database, it will be updated.

updateObjects(Object a, Object b) applies all non-null fields of b to all objects that match the non-null fields of a.
updateObjects(Object a, Object b, Object c) applies all non-null fields of b to all objects that match the non-null fields of a,
	and all non-null fields in c will be set to null on matching objects.

When matching objects that are or contain arrays, matching is done in-order, unless the selection object (the object used in creating the Where clause)
is HashMap, Hashtable, HashSet or any of their subclasses (except LinkedHashMap and LinkedHashSet).




Objects to store:
The framework can store any Java bean.
A bean in this context means an object that:
1. Has a public default constructor, e.g. a constructor that takes no arguments, or alternatively no constructors at all.
2. Has public getter/setter pairs for all values to be stored.  This can be easily generated by good IDEs, for example Eclipse.
Boolean/boolean values can also have is*() instead of get*() methods as a getter.
Getters take no arguments and returns an object of the same type as the corresponding setter.
This is a valid getter/setter pair:
	public void setFoo(Foo myFoo)
	public Foo getFoo()
This is not a valid getter/setter pair:
	public void setFoo(Bar myBar)
	public Foo getFoo()
Additionally, it is important that no getter/setter pair has a name that includes double underscores, e.g. get__Foo(), but get_Foo() or get_F_oo() are still ok.

Optionally, getters may be decorated with any of the following annotations:
Transient - forces the persistence manager to ignore the value. 
			Works similarly to the 'transient' keyword. Can not be combined with any other annotation.
Indexed - the database will create a named index that includes this value.
ColmnName - specifies a name for the column other than the automatically generated one.

Arrays of Characters or chars can be stored as CLOBs, by using the AsClob annotation.
Arrays of Bytes or bytes can be stored as BLOLBS, by using the AsBlob annotation.
If overridden methods are decorated with AsClob,AsBlob, Transient, Indexed or ColumnName, the annotation will be ignored.

Classes can be decorated with the TableName annotation, overriding the automatically generated table name.

Primitives (byte,char, short,int,float,double,boolean) will be stored in the same way as their object counterparts (Byte, Character, Short,Integer, Float, Double, Boolean).
To facilitate searching, it is recommended to use objects instead of primitives where possible.

Object hierarchies are handled in the following way:
When searching for objects of type Foo, all matching Foo instances and instances of Foo's subclasses are returned.
To facilitate this, objects are stored with references to their immediate subclass, if one exists.

When storing an object, only the declared properties are stored. All other properties are stored in the table for the superclass.
This is done recursively, until the root of the object hierarchy is reached.

__ID is the unique identifier of this object. This is 
__REALCLASS indicates the immediate subclass of this object, if one exists.
__REALID indicates the __ID value of the corresonding entry in the subclass table.

If a __REALCLASS entry is encountered when searching for instances of Foo, the subclass is loaded and returned instead, cast to Foo.

Logging:
Conserve uses the java.util.logging framework.
The logger for the Conserve framework can be retrieved by:
Logger logger = Logger.getLogger("org.conserve");
All SQL statements are logged at the FINE level. 
To get an output of all SQL statements, set the level of the logger to FINE, FINER, or FINEST and add a Handler that also accepts FINE level messages.
For example:

	Logger logger = Logger.getLogger("org.conserve");
	ConsoleHandler consoleHandler = new ConsoleHandler();
	consoleHandler.setLevel(Level.FINE);
	logger.addHandler(consoleHandler);
	logger.setLevel(Level.FINE);

This will write all SQL statements to the console, provided that the database engine's JDBC driver ovverrides the 
PreparedStatement.toString() method in a way that outpust the statement.

